package serviceimp

import (
	"context"
	"log"

	pb "github.com/ameniGa/TODO/api/proto"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
)

var dynamoClient *dynamodb.DynamoDB

func init() {
	sess, err := session.NewSession(&aws.Config{
		Region:      aws.String("eu-west-1"),
		Credentials: credentials.NewSharedCredentials("", "default"),
	})
	if err != nil {
		log.Fatalf("can't connect to AWS %v", err)
	}
	log.Println("connected to aws")
	dynamoClient = dynamodb.New(sess)
}

//TodoListServiceServer :implementation of the interface TodoListServiceServer generated by protoc
type TodoListServiceServer struct {
}

//AddToDo :add a TODO item
//take a context and a struct of type ToDoItem
//returns a struct of type GenericResponse in case of success
//returns an error in case of fail
func (*TodoListServiceServer) AddToDo(context context.Context, item *pb.ToDoItem) (*pb.GenericResponse, error) {
	av, err := dynamodbattribute.MarshalMap(item)
	log.Printf("marshall item %v", av)
	if err != nil {
		log.Printf("got error when marshalling new item %v ", err)
	}
	input := &dynamodb.PutItemInput{
		Item:      av,
		TableName: aws.String("TODO"),
	}
	_, err = dynamoClient.PutItem(input)

	if err != nil {
		log.Printf("fail to add item %v", err)
		return &pb.GenericResponse{Code: 400, Msg: "fail"}, nil
	}
	log.Println("successfully added")
	return &pb.GenericResponse{Code: 200, Msg: "success"}, nil
}
